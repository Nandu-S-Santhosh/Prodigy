import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import accuracy_score

def load_images(folder):
    images = []
    labels = []
    for filename in os.listdir(folder):
        img_path = os.path.join(folder, filename)
        img = cv2.imread(img_path)
        img = cv2.resize(img, (64, 64))  # Resize images to a consistent size
        images.append(img.flatten())  # Flatten the image
        label = 1 if 'dog' in filename else 0  # 1 for dog, 0 for cat
        labels.append(label)
    return np.array(images), np.array(labels)

# Set the path to your dataset (update with your actual path)
df = r'C:\Users\nandu\Downloads\archive (2)\Asirra_ cat vs dogs'

X   = my_dataset.keys()
y = [len(keys)for keys in df.values()]

print(f"The shape of my data before splitting is {y}")
import cv2 as cv
help(cv.imread)
def image_properties(file):
    '''Returns dimenstions for an image interms of HWD or HWC'''
    image = cv2.imread(file)    
    h, w, d = image.shape
    return h, w, d 
df = pd.DataFrame(columns=['Height',
                           'Width',
                           'Channels',
                           'Class'])

for pet_class in my_dataset.keys():
    for path in my_dataset[pet_class]:
        h, w, d = image_properties(path)
        df.loc[len(df)] = [h, w, d, pet_class]

df

plt.figure(figsize=(15,8))
sns.countplot(data=df,x='Class')
plt.title("A Countplot showing the total number of Cats and Dogs in our dataset")
plt.show()
plt.figure(figsize=(20,8))
plt.subplot(2,2,1)
sns.histplot(x = df[df['Class']=='dog']['Height'])
plt.ylabel("Total Count")
plt.title('The distribution of Dog Height')
plt.subplot(2,2,2)
sns.histplot(x = df[df['Class']=='dog']['Width'])
plt.ylabel("Total Count")
plt.title('The distribution of Dog Width')
plt.show()
plt.figure(figsize=(20,8))
plt.subplot(2,2,1)
sns.histplot(x = df[df['Class']=='cat']['Height'])
plt.ylabel("Total Count")
plt.title('The distribution of Cat Height')
plt.subplot(2,2,2)
sns.histplot(x = df[df['Class']=='cat']['Width'])
plt.ylabel("Total Count")
plt.title('The distribution of Cat Width')
plt.show()
count = 0
plt.figure(figsize=(15, 15))
for pet_class in my_dataset.keys():    
    for path in my_dataset[pet_class]:                
        sp = plt.subplot(2, 4, count + 1, )
        sp.axis('Off')
        sp.set_title(pet_class)        
        image = cv.imread(path)
        image = cv.cvtColor(image, cv2.COLOR_BGR2RGB)
        plt.imshow(image)
        count += 1
        if count % 4== 0:            
            break
plt.show()
from sklearn.preprocessing import LabelEncoder
lbl_encoder = LabelEncoder()
df['Class'] = lbl_encoder.fit_transform(df['Class'])
df.head()
df['Class'].value_counts().head()
# Selecting  feature and target variable
from sklearn.model_selection import train_test_split
X =  df.drop(['Class'],axis=1)
y = df['Class']
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=101)
X_train.shape, y_train.shape
X_train = X_train/255  
X_test = X_test/255
X_train
from sklearn.metrics import classification_report,accuracy_score
svc = SVC()
svc.fit(X_train,y_train)
predictions = svc.predict(X_test)
print(f"The Classification Report for SVC model is \n{classification_report(y_test,predictions)}")
print(f"The Accuracy score for  my SVC model is \n{accuracy_score(y_test,predictions)*100}%")
